diff --git a/hardhat.config.js b/hardhat.config.js
index 42d3c75..24fa0fc 100644
--- a/hardhat.config.js
+++ b/hardhat.config.js
@@ -1,25 +1,26 @@
-require('dotenv').config();
-require('@nomiclabs/hardhat-waffle');
-require('@nomiclabs/hardhat-web3');
-require('@nomiclabs/hardhat-ethers');
-require('@openzeppelin/hardhat-upgrades');
-require('solidity-coverage');
+require("dotenv").config();
+require("@nomiclabs/hardhat-waffle");
+require("@nomiclabs/hardhat-web3");
+require("@nomiclabs/hardhat-ethers");
+require("@openzeppelin/hardhat-upgrades");
+require("solidity-coverage");
+require("@nomiclabs/hardhat-etherscan");
 
 /**
  * @type import('hardhat/config').HardhatUserConfig
  */
 
-async function deployXBT () {
+async function deployXBT() {
   // We get the contract to deploy
   const accounts = await web3.eth.getAccounts();
-  const xbtContract = await ethers.getContractFactory('XBT');
+  const xbtContract = await ethers.getContractFactory("XBN");
   const xbt = await upgrades.deployProxy(xbtContract, [accounts[0]]);
 
-  console.log('XBT deployed to:', xbt.address);
-  console.log('XBT deployed by:', accounts[0]);
+  console.log("XBT deployed to:", xbt.address);
+  console.log("XBT deployed by:", accounts[0]);
 }
 
-task('deployXBT', 'Deploy XBT Contract').setAction(async () => {
+task("deployXBT", "Deploy XBT Contract").setAction(async () => {
   await deployXBT();
 });
 
@@ -37,7 +38,7 @@ task('deployXBT', 'Deploy XBT Contract').setAction(async () => {
 //     await deployXBTRebaser();
 // });
 
-async function deployAirdropLander (
+async function deployAirdropLander(
   dTokenAddress,
   claimableAmount,
   bonusPeriodSecs,
@@ -45,7 +46,9 @@ async function deployAirdropLander (
   maxBonusRatio
 ) {
   // We get the contract to deploy
-  const airdropLanderContract = await ethers.getContractFactory('AirdropLander');
+  const airdropLanderContract = await ethers.getContractFactory(
+    "AirdropLander"
+  );
 
   const lander = await airdropLanderContract.deploy(
     dTokenAddress,
@@ -55,16 +58,16 @@ async function deployAirdropLander (
     maxBonusRatio
   );
 
-  console.log('AirdropLander deployed to:', lander.address);
+  console.log("AirdropLander deployed to:", lander.address);
 }
 
-task('deployAirdropLander', 'Deploy AirdropLander')
-  .addParam('address', "The distribution token's address")
-  .addParam('claimable', 'Claimable amount')
-  .addParam('bonusperiodsecs', 'Duration time between 2 claims')
-  .addParam('minbonusratio', 'Min bonus ratio')
-  .addParam('maxbonusratio', 'Max bonuns ratio')
-  .setAction(async taskArgs => {
+task("deployAirdropLander", "Deploy AirdropLander")
+  .addParam("address", "The distribution token's address")
+  .addParam("claimable", "Claimable amount")
+  .addParam("bonusperiodsecs", "Duration time between 2 claims")
+  .addParam("minbonusratio", "Min bonus ratio")
+  .addParam("maxbonusratio", "Max bonuns ratio")
+  .setAction(async (taskArgs) => {
     await deployAirdropLander(
       taskArgs.address,
       taskArgs.claimable,
@@ -75,7 +78,16 @@ task('deployAirdropLander', 'Deploy AirdropLander')
   });
 
 module.exports = {
-  solidity: '0.6.8',
-  defaultNetwork: 'ganache',
-  networks: require('./networks').networks
+  solidity: "0.8.2",
+  defaultNetwork: "ganache",
+  networks: require("./networks").networks,
+  paths: {
+    sources: "./contracts",
+    tests: "./test",
+    cache: "./cache",
+    artifacts: "./artifacts",
+  },
+  etherscan: {
+    apiKey: "1CP1YJFMPHJD54Z88EYDHFRU6KN82Z4DRR",
+  },
 };
diff --git a/migrations/1_initial_migration.js b/migrations/1_initial_migration.js
index 16a7ba5..69afcb1 100644
--- a/migrations/1_initial_migration.js
+++ b/migrations/1_initial_migration.js
@@ -1,5 +1,13 @@
-const Migrations = artifacts.require("Migrations");
+// const Migrations = artifacts.require("XBN");
 
-module.exports = function (deployer) {
-  deployer.deploy(Migrations);
-};
+// module.exports = function(deployer) {
+//   deployer.deploy(Migrations);
+// };
+
+// const XBN = artifacts.require("XBN");
+
+// const { deployProxy } = require("@openzeppelin/truffle-upgrades");
+
+// module.exports = async function(deployer) {
+//   await deployProxy(XBN, [42], { deployer, initializer: "store" });
+// };
diff --git a/package.json b/package.json
index 69fd43f..31a90aa 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "engines": {
-    "node": "15.x"
+    "node": "14"
   },
   "name": "xbt",
   "version": "1.2.0",
@@ -10,9 +10,12 @@
     "truffle:migrate": "truffle migrate -f 2 --to 2 --reset --compile-all --network ganache",
     "truffle:console": "truffle console --network local",
     "truffle:migrate:mainnet": "truffle migrate -f 2 --to 2 --network=mainnet",
+    "truffle:migrate:testnet": "truffle migrate -f 2 --to 2 --reset --compile-all --network=bsc_testnet",
+    "verify": "truffle run verify XBN@0x7450F37085d66a823e6189FC2E6c6a214b141d19 --network bsc_testnet",
     "hardhat:start": "npx hardhat node --network hardhat",
     "oz_deploy": "npx openzeppelin deploy",
     "hardhat:compile": "hardhat compile --network ganache",
+    "hardhat:verify": "npx hardhat verify --network bsc_testnet 0xA5699adc4457b502D4F6C68CC0571172eFF0C33e",
     "deployXBT:hardhat": "hardhat deployXBT --network ganache",
     "deployAirdropLander:hardhat": "hardhat deployAirdropLander --network ganache",
     "compile-contracts": "./scripts/compile-contracts.sh",
@@ -26,6 +29,7 @@
   "devDependencies": {
     "@nomiclabs/buidler": "^1.4.8",
     "@nomiclabs/hardhat-ethers": "^2.0.1",
+    "@nomiclabs/hardhat-etherscan": "^2.1.2",
     "@nomiclabs/hardhat-waffle": "^2.0.0",
     "@openzeppelin/buidler-upgrades": "^1.2.1",
     "@openzeppelin/cli": "^2.8.2",
@@ -53,7 +57,7 @@
     "moment": "^2.29.1",
     "solidity-coverage": "^0.7.13",
     "truffle-hdwallet-provider": "^1.0.17",
-    "truffle-plugin-verify": "^0.5.6"
+    "truffle-plugin-verify": "^0.5.7"
   },
   "dependencies": {
     "@nomiclabs/hardhat-web3": "^2.0.0",
@@ -69,4 +73,4 @@
     "truffle": "^5.1.50",
     "web3": "^1.3.1"
   }
-}
+}
\ No newline at end of file
diff --git a/truffle-config.js b/truffle-config.js
index ea8ec53..23d631e 100644
--- a/truffle-config.js
+++ b/truffle-config.js
@@ -17,13 +17,13 @@
  * phrase from a file you've .gitignored so it doesn't accidentally become public.
  *
  */
-require('dotenv').config();
+require("dotenv").config();
 
-const HDWalletProvider = require('@truffle/hdwallet-provider');
+const HDWalletProvider = require("@truffle/hdwallet-provider");
 
 const privateKeys = [process.env.PRIVATE_KEY]; // private keys
 const xbtPrivateKeys = [process.env.XBT_PRIVATE_KEY]; // xbt genesis private keys
-const web3 = require('web3');
+const web3 = require("web3");
 
 module.exports = {
   /**
@@ -38,42 +38,54 @@ module.exports = {
 
   networks: {
     mainnet: {
-      provider: function () {
-        return new HDWalletProvider(privateKeys, `https://mainnet.infura.io/v3/${process.env.INFURA_ID}`);
+      provider: function() {
+        return new HDWalletProvider(
+          privateKeys,
+          `https://mainnet.infura.io/v3/${process.env.INFURA_ID}`
+        );
       },
       gas: 2000000,
-      gasPrice: web3.utils.toWei('50', 'gwei'),
+      gasPrice: web3.utils.toWei("50", "gwei"),
       network_id: 1,
       skipDryRun: true,
-      networkCheckTimeout: 100000
+      networkCheckTimeout: 100000,
     },
     local: {
-      provider: function () {
-        return new HDWalletProvider(xbtPrivateKeys, 'http://127.0.0.1:8545');
+      provider: function() {
+        return new HDWalletProvider(xbtPrivateKeys, "http://127.0.0.1:8545");
       },
-      network_id: 5777 // Any network (default: none)
+      network_id: 5777, // Any network (default: none)
     },
     rinkeby: {
-      provider: function () {
-        return new HDWalletProvider(privateKeys, `https://rinkeby.infura.io/v3/${process.env.INFURA_ID}`);
+      provider: function() {
+        return new HDWalletProvider(
+          privateKeys,
+          `https://rinkeby.infura.io/v3/${process.env.INFURA_ID}`
+        );
       },
       gas: 5000000,
       gasPrice: 24000000000,
       network_id: 4,
-      skipDryRun: true
+      skipDryRun: true,
     },
     bsc_testnet: {
-      provider: () => new HDWalletProvider(privateKeys, 'https://data-seed-prebsc-1-s1.binance.org:8545'),
+      provider: () =>
+        new HDWalletProvider(
+          privateKeys,
+          "https://data-seed-prebsc-1-s1.binance.org:8545"
+        ),
       network_id: 97,
       confirmations: 10,
-      timeoutBlocks: 200
+      timeoutBlocks: 200,
+      // production: true,
     },
     bsc: {
-      provider: () => new HDWalletProvider(privateKeys, 'https://bsc-dataseed1.binance.org'),
+      provider: () =>
+        new HDWalletProvider(privateKeys, "https://bsc-dataseed1.binance.org"),
       network_id: 56,
       confirmations: 10,
       timeoutBlocks: 200,
-      gas: 10000000
+      gas: 10000000,
     },
     // Useful for testing. The `development` name is special - truffle uses it by default
     // if it's defined here and no other network is specified at the command line.
@@ -82,10 +94,10 @@ module.exports = {
     // options below to some value.
     //
     ganache: {
-      host: '127.0.0.1', // Localhost (default: none)
+      host: "127.0.0.1", // Localhost (default: none)
       port: 7545, // Standard Ethereum port (default: none)
-      network_id: 5777 // Any network (default: none)
-    }
+      network_id: 5777, // Any network (default: none)
+    },
     // Another network with more advanced options...
     // advanced: {
     // port: 8777,             // Custom port
@@ -115,13 +127,13 @@ module.exports = {
 
   // Set default mocha options here, use special reporters etc.
   mocha: {
-    timeout: 100000
+    timeout: 100000,
   },
 
   // Configure your compilers
   compilers: {
     solc: {
-      version: '0.6.8' // Fetch exact version from solc-bin (default: truffle's version)
+      version: "0.6.8", // Fetch exact version from solc-bin (default: truffle's version)
       // // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)
       // settings: { // See the solidity docs for advice about optimization and evmVersion
       //   optimizer: {
@@ -130,13 +142,10 @@ module.exports = {
       //   },
       //   evmVersion: 'constantinople'
       // }
-    }
+    },
   },
-  plugins: [
-    'truffle-plugin-verify',
-    'solidity-coverage'
-  ],
+  plugins: ["truffle-plugin-verify", "solidity-coverage"],
   api_keys: {
-    etherscan: process.env.ETHERSCAN_KEY
-  }
+    bscscan: process.env.ETHERSCAN_KEY,
+  },
 };
